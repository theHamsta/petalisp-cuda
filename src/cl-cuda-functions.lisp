(defpackage :petalisp-cuda.cl-cuda-functions
  (:use :cl
        :cl-cuda
        :cl-cuda.lang.built-in)
  (:export +built-in-functions+
           +scalar-types+))
(in-package :petalisp-cuda.cl-cuda-functions)

(defparameter +built-in-functions+
  '(;; arithmetic operators
    + (((int    int)    int    t   "+")
       ((float  float)  float  t   "+")
       ((float3 float3) float3 nil "float3_add")
       ((float4 float4) float4 nil "float4_add")
       ((double  double)  double  t   "+")
       ((double3 double3) double3 nil "double3_add")
       ((double4 double4) double4 nil "double4_add")
       ((int    float)    float    t   "+")
       ((float    int)    float    t   "+")
       ((int    double)    double    t   "+")
       ((double    int)    double    t   "+"))
    - (((int)           int    nil "int_negate")
       ((float)         float  nil "float_negate")
       ((float3)        float3 nil "float3_negate")
       ((float4)        float4 nil "float4_negate")
       ((double)  double  nil "double_negate")
       ((double3) double3 nil "double3_negate")
       ((double4) double4 nil "double4_negate")
       ((int    int)    int    t   "-")
       ((float  float)  float  t   "-")
       ((float3 float3) float3 nil "float3_sub")
       ((float4 float4) float4 nil "float4_sub")
       ((double  double)  double  t   "-")
       ((double3 double3) double3 nil "double3_sub")
       ((double4 double4) double4 nil "double4_sub")
       ((int    float)    float    t   "-")
       ((float    int)    float    t   "-")
       ((int    double)    double    t   "-")
       ((double    int)    double    t   "-"))
    * (((int    int)    int    t   "*")
       ((float  float)  float  t   "*")
       ((float3 float)  float3 nil "float3_scale")
       ((float  float3) float3 nil "float3_scale_flipped")
       ((float4 float)  float4 nil "float4_scale")
       ((float  float4) float4 nil "float4_scale_flipped")
       ((double  double)  double  t   "*")
       ((double3 double)  double3 nil "double3_scale")
       ((double  double3) double3 nil "double3_scale_flipped")
       ((double4 double)  double4 nil "double4_scale")
       ((double  double4) double4 nil "double4_scale_flipped")
       ((int    float)    float    t   "*")
       ((float    int)    float    t   "*")
       ((int    double)    double    t   "*")
       ((double    int)    double    t   "*"))
    / (((int)           int    nil "int_recip")
       ((float)         float  nil "float_recip")
       ((float3)        float3 nil "float3_recip")
       ((float4)        float4 nil "float4_recip")
       ((double)  double  nil "double_recip")
       ((double3) double3 nil "double3_recip")
       ((double4) double4 nil "double4_recip")
       ((int    int)    int    t   "/")
       ((float  float)  float  t   "/")
       ((float3 float)  float3 nil "float3_scale_inverted")
       ((float4 float)  float4 nil "float4_scale_inverted")
       ((double  double)  double  t   "/")
       ((double3 double)  double3 nil "double3_scale_inverted")
       ((double4 double)  double4 nil "double4_scale_inverted")
       ((int    float)    float    t   "/")
       ((float    int)    float    t   "/")
       ((int    double)    double    t   "/")
       ((double    int)    double    t   "/"))
    mod (((int    int)    int    t   "%"))
    ;; relational operators
    =    (((int   int)   bool t "==")
          ((float float) bool t "==")
          ((double double) bool t "=="))
    /=   (((int   int)   bool t "!=")
          ((float float) bool t "!=")
          ((double double) bool t "!="))
    <    (((int   int)   bool t "<")
          ((float float) bool t "<")
          ((double double) bool t "<"))
    >    (((int   int)   bool t ">")
          ((float float) bool t ">")
          ((double double) bool t ">"))
    <=   (((int   int)   bool t "<=")
          ((float float) bool t "<=")
          ((double double) bool t "<="))
    >=   (((int   int)   bool t ">=")
          ((float float) bool t ">=")
          ((double double) bool t ">="))
    ;; logical operators
    not  (((bool) bool nil "!"))
    and  (((bool bool) bool t "&&"))
    and  (((bool) bool nil ""))
    ;; bitwise operations
    xor (((int    int)    int    t   "^"))
    shl (((int    int)    int    t   "<<"))
    shr (((int    int)    int    t   ">>"))
    ;; mathematical functions
    exp  (((float) float nil "expf")
          ((double) double nil "exp"))
    log  (((float) float nil "logf")
          ((double) double nil "log"))
    expt   (((float float) float nil "powf")
            ((double double) double nil "pow"))
    sin  (((float) float nil "sinf")
          ((double) double nil "sin"))
    cos  (((float) float nil "cosf")
          ((double) double nil "cos"))
    tan  (((float) float nil "tanf")
          ((double) double nil "tan"))
    sinh  (((float) float nil "sinhf")
           ((double) double nil "sinh"))
    cosh  (((float) float nil "coshf")
           ((double) double nil "cosh"))
    tanh  (((float) float nil "tanhf")
           ((double) double nil "tanh"))
    rsqrt (((float) float nil "rsqrtf")
           ((double) double nil "rsqrt"))
    sqrt   (((float) float nil "sqrtf")
            ((int) float nil "sqrtf")
            ((double) double nil "sqrt"))
    floor  (((float) int   nil "floorf")
            ((double) int   nil "floor"))
    ;; mathematical intrinsics
    ;;
    ;; If there is no double version, then fall back on a correct but
    ;; slow implementation.
    __exp    (((float) float nil "__expf")
              ((double) double nil "exp"))
    __divide (((float float) float nil "__fdividef")
              ((double double) double t "/"))
    ;; atomic functions
    atomic-add (((int* int) int nil "atomicAdd"))
    ;; address-of operator
    pointer (((int)   int*   nil "&")
             ((float) float* nil "&")
             ((double) double* nil "&")
             ((curand-state-xorwow) curand-state-xorwow* nil "&"))
    ;; built-in vector constructor
    float3 (((float float float) float3 nil "make_float3"))
    float4 (((float float float float) float4 nil "make_float4"))
    double3 (((double double double) double3 nil "make_double3"))
    double4 (((double double double double) double4 nil "make_double4"))
    ;; Synchronization functions
    syncthreads ((() void nil "__syncthreads"))
    ;; type casting intrinsics
    double-to-int-rn (((double) int nil "__double2int_rn"))
    ;; linear algebraic operators
    dot (((float3 float3) float nil "float3_dot")
         ((float4 float4) float nil "float4_dot")
         ((double3 double3) double nil "double3_dot")
         ((double4 double4) double nil "double4_dot"))
    ;; CURAND operations
    ;; It's :UNSIGNED-LONG-LONG, but this wrapper function only
    ;; supports INT.
    curand-init-xorwow (((int int int curand-state-xorwow*) void nil
                                                            "curand_init_xorwow"))
    curand-uniform-float-xorwow (((curand-state-xorwow*) float nil
                                                         "curand_uniform_float_xorwow"))
    curand-uniform-double-xorwow (((curand-state-xorwow*) double nil
                                                          "curand_uniform_double_xorwow"))
    curand-normal-float-xorwow (((curand-state-xorwow*) float nil
                                                        "curand_normal_float_xorwow"))
    curand-normal-double-xorwow (((curand-state-xorwow*) double nil
                                                         "curand_normal_double_xorwow"))
    :coerce-float
    (((int float) float t "+ 0 *")
     ((float float) float t "+ 0 *")
     ((double float) float t "+ 0 *")
     ((float) float nil "(float)")
     ((double) float nil "(float)")
     ((int) float nil "(float)"))
    :coerce-int (((int float) int t "+ 0 *")
                 ((float float) int t "+ 0 *")
                 ((double float) int t "+ 0 *")
                 ((int) int nil "(int)")
                 ((float) int nil "(int)")
                 ((double) int nil "(int)"))
    :coerce-double
    (((int double) int t "+ 0 *")
     ((float double) int t "+ 0 *")
     ((double double) int t "+ 0 *")
     ((int) float nil "(double)")
     ((float) float nil "(double)")
     ((double) float nil "(double)"))
    max
    (((float float) float nil "fmaxf")
     ((double double) double nil "fmax"))
    min
    (((float float) float nil "fminf")
     ((double double) double nil "fmin"))
    floor
    (((float) float nil "floor")
     ((double) double nil "floor"))
    ceil
    (((float) float nil "ceil")
     ((double) double nil "ceil"))
    cos
    (((float) float nil "cosf")
     ((int) float nil "cosf")
     ((double) double nil "cos"))
    sqrt
    (((int) float nil "sqrtf")
     ((float) float nil "sqrt")
     ((double) float nil "sqrt")
     )
    abs
    (((int) float nil "abs")
     ((float) float nil "abs")
     ((double) float nil "abs"))
     coerce
     (((int float) float t "+ 0 *")
      ((float int) int t "+ 0 *")
      ((float float) float t "+ 0 *")
      ((int int) int t "+ 0 *")
      ((double float) float t "+ 0 *")
      ((float int) float t "+ 0 *")
      )
    :coerce-float
    (((int float) float t "+ 0 *")
     ((float float) float t "+ 0 *")
     ((float) float nil "(float)")
     ((double) float nil "(float)")
     ((int) float nil "(float)")
     ((double float) float t "+ 0 *")
     )
    :coerce-int
    (((int float) int t "+ 0 *")
      ((float float) int t "+ 0 *")
      ((double float) int t "+ 0 *")
      ((int) int nil "(int)")
      ((float) int nil "(int)")
      ((double) int nil "(int)")
      )
    :coerce-double
          (((int double) int t "+ 0 *")
            ((float double) int t "+ 0 *")
            ((double double) int t "+ 0 *")
            ((int) float nil "(double)")
            ((float) float nil "(double)")
            ((double) float nil "(double)")
            )
    :round
          (((int) int nil "1*")
            ((float) int nil "roundf")
            ((double) int nil "round"))
    rem
          (((float float) float nil "fmodf")
            ((float int) float nil "fmodf")
            ((double int) double nil "fmod")
            ((double double) double nil "fmod"))
    ))



(defparameter +scalar-types+
  '((void :void "void")
    (bool (:boolean :int8) "bool")
    (int :int "int")
    (uint8 :uint8 "uint8_t")
    (uint16 :uint16 "uint16_t")
    (uint32 :uint32 "uint32_t")
    (uint64 :uint64 "uint64_t")
    (int8 :int8 "int8_t")
    (int16 :int16 "int16_t")
    (int32 :int32 "int32_t")
    (int64 :int64 "int64_t")
    (float :float "float")
    (double :double "double")
    (:half __half "__half")
    (:bfloat16 __bfloat16 "__bfloat16")
    (curand-state-xorwow (:struct curand-state-xorwow)
                         "curandStateXORWOW_t")))
